@using Shopily.Domain.ViewModel.Products
@model EditVM

@{
    ViewData["title"] = "Edit Product";
}

<!-- Breadcrumb -->
<div class="bg-light py-3">
    <div class="container">
        <div class="row">
            <div class="col-md-12 mb-0">
                <a href="/" class="text-decoration-none text-primary">Home</a>
                <span class="mx-2">/</span>
                <strong class="text-black">Edit Product</strong>
            </div>
        </div>
    </div>
</div>

<div class="container my-5">
    <div class="row">
        <div class="col-md-6 mb-4">
            <!-- Product Image with margin -->
            <div class="card border-0 shadow-sm">
                <img id="ImageCardPreview" src="@Url.Content("~/images/" + Model.ImagePath)" alt="@Model.ProductName" class="img-fluid rounded" style="margin-left: 15px; margin-right: 15px;">
            </div>

        </div>

        <!-- Product Details and Edit Form -->
        <div class="col-md-6">
            <form action="/Admin/AdminProductEdit" method="post" enctype="multipart/form-data">

                @Html.HiddenFor(m => m.Id)
               
                <div class="row mb-3">
                    <div class="col-md-4">
                        @Html.LabelFor(m => m.ProductName, new { @class = "form-label" })
                    </div>
                    <div class="col-md-8">
                        @Html.TextBoxFor(m => m.ProductName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.ProductName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-4">
                        @Html.LabelFor(m => m.Description, new { @class = "form-label" })
                    </div>
                    <div class="col-md-8">
                        @Html.TextAreaFor(m => m.Description, new { @class = "form-control", rows = 5 })
                        @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-4">
                        @Html.LabelFor(m => m.Price, new { @class = "form-label" })
                    </div>
                    <div class="col-md-8">
                        @Html.TextBoxFor(m => m.Price, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Price, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-4">
                        @Html.LabelFor(m => m.Type, new { @class = "form-label" })
                    </div>
                    <div class="col-md-8">
                        @Html.DropDownListFor(m => m.Type, new SelectList(new List<SelectListItem>
                        {
                        new SelectListItem { Value = "Boots", Text = "Boots" },
                        new SelectListItem { Value = "Jacket", Text = "Jacket" },
                        new SelectListItem { Value = "T-shirt", Text = "T-shirt" }
                        }, "Value", "Text"), "-- Select Type --", new { @class = "form-select" })
                        @Html.ValidationMessageFor(m => m.Type, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-4">
                        @Html.LabelFor(m => m.Gender, new { @class = "form-label" })
                    </div>
                    <div class="col-md-8">
                        @Html.DropDownListFor(m => m.Gender, new SelectList(new List<SelectListItem>
                        {
                        new SelectListItem { Value = "Male", Text = "Male" },
                        new SelectListItem { Value = "Female", Text = "Female" },
                        new SelectListItem { Value = "Kids", Text = "Kids" }
                        }, "Value", "Text"), "-- Select Gender --", new { @class = "form-select" })
                        @Html.ValidationMessageFor(m => m.Gender, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-4">
                        <label for="ImageUpload" class="form-label">Upload New Product Image</label>
                    </div>
                    <div class="col-md-8">
                        <input type="file" id="ImageUpload" name="Image" class="form-control" accept="image/*" />

                    </div>
                </div>


                <!-- Action Buttons -->
                <div class="row">
                    <div class="col-md-4"></div>
                    <div class="col-md-8 d-flex justify-content-between">
                        <a class="btn btn-secondary" href="/AdminProduct">Back</a>
                        <input type="submit" class="btn btn-primary" value="Save" />
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const imageUploadInput = document.getElementById("ImageUpload");
        const imageCardPreview = document.getElementById("ImageCardPreview");

        imageUploadInput.addEventListener("change", function () {
            const file = this.files[0];

            if (file) {
                const reader = new FileReader();

                // Read the file and update the card image preview
                reader.onload = function (e) {
                    imageCardPreview.src = e.target.result;
                };

                reader.readAsDataURL(file);
            } else {
                // Reset the image preview if no file is selected
                imageCardPreview.src = "@Url.Content("~/images/" + Model.ImagePath)";
            }
        });
    });
</script>

